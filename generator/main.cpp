#include <fstream>
#include <iostream>
#include <span>


/*
	Tool for generating lookup tables
*/

// write a table
void writeTable(std::ofstream &f, std::span<int> table) {
	int size = table.size();

	f << "{" << std::endl;
	for (int j = 0; j < size / 16; ++j) {
		f << "\t";
		for (int i = 0; i < 16; ++i) {
			f << table[j * 16 + i] << ", ";
		}
		f << std::endl;
	}
	f << "};" << std::endl;
}

// generate lookup table for I2S interface
void generateI2S(const std::string &path) {
	std::cout << "Generate " << path << std::endl;

	int table[256];
	for (int j = 0; j < std::size(table); ++j) {
		// 24 bit value containing 8 times [start DATA stop] bits
		int entry = 0b100100100100100100100100;
		//             ^  ^  ^  ^  ^  ^  ^  ^
		//             7  6  5  4  3  2  1  0

		// set the 8 data bits
		for (int i = 0; i < 8; ++i) {
			if (j & (1 << i)) {
				int bitPosition = i * 3 + 1;
				entry |= 1 << bitPosition;
			}
		}

		table[j] = entry;
	}

	std::ofstream f(path);
	f << "// generated by generateI2S()" << std::endl;
	f << "const uint32_t bitTable[256] = ";
	writeTable(f, table);
	f.close();
}

// generate lookup table for 7 bit UART interface
void generateUART(const std::string &path) {
	std::cout << "Generate " << path << std::endl;

	int table[64];
	for (int j = 0; j < std::size(table); ++j) {
		// 16 bit value containing two times [dummy DATA stop start DATA stop start DATA] bits
		int entry = 0b0010010000100100;
		//             ^  ^  ^ ^  ^  ^
		//             0  1  2 3  4  5

		// set the 6 data bits
		for (int i = 0; i < 6; ++i) {
			if (j & (1 << i)) {
				int bitPosition = 14 - (i * 3 + (i < 3 ? 0 : -1));
				entry |= 1 << bitPosition;
			}
		}

		table[j] = entry;
	}

	std::ofstream f(path);
	f << "// generated by generateUART()" << std::endl;
	f << "const uint16_t bitTable[64] = ";
	writeTable(f, table);
	f.close();
}

int main(int argc, const char **argv) {
	// generate lookup table for nRF52 I2S implementation
	generateI2S("coco/nrf52/coco/platform/bitTable_I2S.hpp");

	// generate lookup table for STM32 UART implementation
	generateUART("coco/stm32/coco/platform/bitTable_UART.hpp");

	return 0;
}
